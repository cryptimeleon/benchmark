plugins {
    id 'java-library'
    id "maven-publish"
}

group = 'de.upb.crypto'
version = '0.0.3' + (Boolean.valueOf(System.getProperty("disablesnapshot")) ? "" : "-SNAPSHOT")

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://nexus.cs.upb.de/repository/sfb901-libs/" }
    maven { url "https://nexus.cs.upb.de/repository/sfb901-releases/" }
    maven { url "https://nexus.cs.upb.de/repository/sfb901-snapshots/" }
}

sourceSets {
    jmh {
        compileClasspath += sourceSets.main.runtimeClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

dependencies {
    api group: 'de.upb.crypto', name: 'craco', version: '1.1.2' + (Boolean.valueOf(System.getProperty("disablesnapshot")) ? "" : "-SNAPSHOT")
    api group: 'de.upb.crypto', name: 'mclwrap', version: '0.0.3' + (Boolean.valueOf(System.getProperty("disablesnapshot")) ? "" : "-SNAPSHOT")

    // jmh dependencies for benchmarking
    jmhImplementation "org.openjdk.jmh:jmh-core:1.23"
    jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:1.23"

    testCompileOnly group: 'junit', name: 'junit', version: '4.12'
}

test {
    useJUnitPlatform()
    maxParallelForks 4
    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}

task packageTests(type: Jar) {
    archiveClassifier.set("tests")
    from sourceSets.test.output+sourceSets.test.allSource
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

configurations {
    testArtifacts
}
artifacts {
    archives packageTests
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }

    }

    repositories {
        maven {
            credentials {
                username = System.getProperty('nexus.user')
                password = System.getProperty('nexus.key')
            }
            def releasesRepoUrl = "https://nexus.cs.upb.de/repository/sfb901-releases/"
            def snapshotsRepoUrl = "https://nexus.cs.upb.de/repository/sfb901-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

// can use this to run all benchmarks via task
task jmh(type: JavaExec) {
    description = "This task will run all JMH benchmarks"
    classpath = sourceSets.jmh.runtimeClasspath
    main = "org.openjdk.jmh.Main"

    def include = project.properties.get('include', '');
    def format = project.properties.get('format', 'json');
    def resultFile = file("build/reports/jmh/result.${format}")
    resultFile.parentFile.mkdirs()

    args include
    args '-rf', format
    args '-rff', resultFile
}
